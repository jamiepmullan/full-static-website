
service: <service-name>

plugins:
  - serverless-s3-sync

custom:
  ACC_ID: <aws-account-id>
  siteName: <site-name>
  aliasHostedZoneId: Z2FDTNDATAQYW2 # This is the ID Cloudfront in US-EAST-1
  aliasDNSName: !GetAtt myDistribution.DomainName
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: static

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  stackTags:
    serverless:servess: ${self:service}
  region: <whatever-region>

resources:
  Resources:

    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        
    CloudFrontOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "origin identity"

    WebAppStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt: [ CloudFrontOriginIdentity , S3CanonicalUserId ]
            Action: "s3:GetObject"
            Resource: arn:aws:s3:::${self:custom.siteName}/*

    myDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - <alias-if-applicable>
          ViewerCertificate:
            AcmCertificateArn: <us-east-1-cert-arn>
            SslSupportMethod: sni-only
          Enabled: "true"
          DefaultRootObject: "index.html"
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: "false"
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: "0"
            MaxTTL: "6"
            DefaultTTL: "3"
          Origins:
            - DomainName: ${self:custom.siteName}.s3.amazonaws.com
              Id: myS3Origin
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join" : ["", ["origin-access-identity/cloudfront/", { Ref: CloudFrontOriginIdentity } ] ]  }

    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.siteName}.
        Name: www.${self:custom.siteName}.
        Type: 'A'

  Outputs:
    CloudFrontOriginIdentity:
      Value:
        'Ref': CloudFrontOriginIdentity
    StaticSiteS3BucketName:
      Value:
        'Ref': StaticSite
    StaticSiteS3BucketDomainName:
      Value:
        Fn::GetAtt:
          - StaticSite
          - DomainName
    StaticSiteS3BucketWebsiteURL:
      Value:
        Fn::GetAtt:
          - StaticSite
          - WebsiteURL
    CloudfrontDomainName:
      Value:
        Fn::GetAtt:
          - myDistribution
          - DomainName
